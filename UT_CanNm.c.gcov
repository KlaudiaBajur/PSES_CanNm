        -:    0:Source:UT_CanNm.c
        -:    0:Graph:UT_CanNm.gcno
        -:    0:Data:UT_CanNm.gcda
        -:    0:Runs:23
        -:    0:Programs:1
        -:    1:/** ==================================================================================================================*\
        -:    2:  @file UT_CanNm.c
        -:    3:
        -:    4:  @brief Unit tests for Can Network Management Module
        -:    5:\*====================================================================================================================*/
        -:    6:#define UNIT_TEST
        -:    7:
        -:    8:/*====================================================================================================================*\
        -:    9:    Include headers
        -:   10:\*====================================================================================================================*/
        -:   11:#include "Std_Types.h"
        -:   12:#include "acutest.h"
        -:   13:#include "fff.h"
        -:   14:#include "CanNm.h"
        -:   15:#include "CanNm.c"
        -:   16:
        -:   17:/*====================================================================================================================*\
        -:   18:    Local macros
        -:   19:\*====================================================================================================================*/
        -:   20:#define CANNM_CHANNEL_COUNT 1
        -:   21:#define CANNM_RXPDU_COUNT   1
        -:   22:#define CANNM_SDU_LENGTH    8
        -:   23:
        -:   24:/*====================================================================================================================*\
        -:   25:    Local types
        -:   26:\*====================================================================================================================*/
        -:   27:
        -:   28:/*====================================================================================================================*\
        -:   29:    Global variables
        -:   30:\*====================================================================================================================*/
        -:   31:
        -:   32:/*====================================================================================================================*\
        -:   33:    Local variables (static)
        -:   34:\*====================================================================================================================*/
        -:   35:
        -:   36:static uint8 TestRxMessageSdu[CANNM_SDU_LENGTH] = {1, 2, 3, 4, 5, 6, 7, 8};
        -:   37:static uint8 TestTxMessageSdu[CANNM_SDU_LENGTH] = {1, 2, 3, 4, 5, 6, 7, 8};
        -:   38:
        -:   39:static PduInfoType canNmRxPduInfo = {
        -:   40:  .SduDataPtr = TestRxMessageSdu,
        -:   41:  .SduLength = CANNM_SDU_LENGTH
        -:   42:};
        -:   43:
        -:   44:static PduInfoType canNmTxPduInfo = {
        -:   45:  .SduDataPtr = TestTxMessageSdu,
        -:   46:  .SduLength = CANNM_SDU_LENGTH
        -:   47:};
        -:   48:
        -:   49:/**
        -:   50: * @brief RX PDU
        -:   51: *
        -:   52: * RX PDU for CanNm module (10.2.6)
        -:   53:*/
        -:   54:static CanNm_RxPdu canNmRxPdu = {
        -:   55:  .RxPduId = 0,
        -:   56:  .RxPduRef = &canNmRxPduInfo
        -:   57:};
        -:   58:
        -:   59:/**
        -:   60: * @brief TX PDU
        -:   61: *
        -:   62: * TX PDU for CanNm module (10.2.7)
        -:   63:*/
        -:   64:static CanNm_TxPdu canNmTxPdu = {
        -:   65:  .TxConfirmationPduId = 0,
        -:   66:  .TxPduRef = &canNmTxPduInfo
        -:   67:};
        -:   68:
        -:   69:/**
        -:   70: * @brief User Data TX PDU
        -:   71: *
        -:   72: * User Data TX PDU for CanNm module (10.2.8)
        -:   73:*/
        -:   74:static CanNm_UserDataTxPdu canNmUserDataTxPdu = {
        -:   75:  .TxUserDataPduId = 0,
        -:   76:  .TxUserDataPduRef = &canNmTxPduInfo
        -:   77:};
        -:   78:
        -:   79:/**
        -:   80: * @brief Partial Network Filter Mask Byte
        -:   81: *
        -:   82: * Partial Network Filter Mask Byte for CanNm module (10.2.10)
        -:   83:*/
        -:   84:static CanNm_PnFilterMaskByte canNmPnFilterMaskByte = {
        -:   85:  .PnFilterMaskByteIndex = 0,
        -:   86:  .PnFilterMaskByteValue = 0
        -:   87:};
        -:   88:
        -:   89:/**
        -:   90: * @brief Partial Network Info
        -:   91: *
        -:   92: * Partial Network Info for CanNm module (10.2.9)
        -:   93:*/
        -:   94:static CanNm_PnInfo canNmPnInfo = {
        -:   95:  .PnInfoLength = 1,
        -:   96:  .PnInfoOffset = 0,
        -:   97:  .PnFilterMaskByte = &canNmPnFilterMaskByte
        -:   98:};
        -:   99:
        -:  100:/**
        -:  101: * @brief Test channel configuration
        -:  102: *
        -:  103: * Test channel configuration for CanNm (10.2.5)
        -:  104:*/
        -:  105:static CanNm_ChannelType canNmChannel[CANNM_CHANNEL_COUNT] = {
        -:  106:  [0] = {
        -:  107:	.TimeoutTime 			= 100,
        -:  108:	.MsgCycleOffset			= 5,
        -:  109:	.MsgCycleTime 			= 500,
        -:  110:	.RepeatMessageTime 		= 1000,
        -:  111:	.WaitBusSleepTime 		= 1000,
        -:  112:	.RemoteSleepIndTime 	= 2000,
        -:  113:    .PduCbvPosition  		= CANNM_PDU_BYTE_1,
        -:  114:    .PduNidPosition 		= CANNM_PDU_BYTE_0,
        -:  115:    .RxPdu[0]       		= &canNmRxPdu,
        -:  116:	.RxPdu[1]       		= &canNmRxPdu,
        -:  117:	.RxPdu[2]       		= &canNmRxPdu,
        -:  118:	.RxPdu[3]       		= &canNmRxPdu,
        -:  119:	.RxPdu[4]       		= &canNmRxPdu,
        -:  120:	.RxPdu[5]       		= &canNmRxPdu,
        -:  121:	.RxPdu[6]       		= &canNmRxPdu,
        -:  122:    .TxPdu          		= &canNmTxPdu,
        -:  123:    .UserDataTxPdu  		= &canNmUserDataTxPdu,
        -:  124:	.NodeDetectionEnabled 	= 1,
        -:  125:	.ActiveWakeupBitEnabled = 1,
        -:  126:	.NodeIdEnabled 			= 1,
        -:  127:	.RepeatMsgIndEnabled 	= 1
        -:  128:  }
        -:  129:};
        -:  130:
        -:  131:/**
        -:  132: * @brief Test configuration
        -:  133: *
        -:  134: * Test configuration for CanNm module (10.2.2)
        -:  135:*/
        -:  136:static CanNm_ConfigType canNmConfig = {
        -:  137:  .MainFunctionPeriod = 1.0,
        -:  138:  .ChannelConfig = {canNmChannel}
        -:  139:};
        -:  140:
        -:  141:static NetworkHandleType nmChannelHandle = 0;
        -:  142:
        -:  143:static PduIdType TxPduId = 0;
        -:  144:static PduIdType RxPduId = 0;
        -:  145:
        -:  146:static uint8 SduDataPtr[CANNM_SDU_LENGTH];
        -:  147:
        -:  148:static PduInfoType PduInfoPtr = {
        -:  149:	.SduDataPtr = SduDataPtr,
        -:  150:	.SduLength = CANNM_SDU_LENGTH
        -:  151:};
        -:  152:
        -:  153:const PduInfoType cPduInfoPtr;
        -:  154:
        -:  155:uint8 nmNodeIdPtr = 1;
        -:  156:uint8 nmPduDataPtr = 1;
        -:  157:Nm_StateType nmStatePtr = 1;
        -:  158:Nm_ModeType nmModePtr = 1;
        -:  159:boolean nmRemoteSleepIndPtr;
        -:  160:/*====================================================================================================================*\
        -:  161:    Local functions declarations
        -:  162:\*====================================================================================================================*/
        -:  163:
        -:  164:/*====================================================================================================================*\
        -:  165:    Global inline functions and function macros code
        -:  166:\*====================================================================================================================*/
        -:  167:
        -:  168:/*====================================================================================================================*\
        -:  169:    Global functions code
        -:  170:\*====================================================================================================================*/
        -:  171:
        -:  172:/*====================================================================================================================*\
        -:  173:    Local functions (static) code
        -:  174:\*====================================================================================================================*/
        -:  175:
        -:  176:/**
        -:  177: * @brief Initialization test
        -:  178: *
        -:  179: * Function testing initialization for CanNm (7.4, 8.3.1)
        -:  180:*/
        1:  181:void Test_Of_CanNm_Init(void)
        -:  182:{
        -:  183:	/*Check if the CanNm module is correctly initialized*/
        1:  184:	CanNm_Init(&canNmConfig);
        1:  185:	TEST_CHECK(CanNm_Internal.Channels[0].State == NM_STATE_BUS_SLEEP);
        1:  186:	TEST_CHECK(CanNm_Internal.Channels[0].Requested == FALSE);
        1:  187:	TEST_CHECK(CanNm_Internal.Channels[0].Mode == NM_MODE_BUS_SLEEP);
        1:  188:	TEST_CHECK(CanNm_ConfigPtr == &canNmConfig);
        -:  189:
        1:  190:	if (canNmConfig.GlobalPnSupport) {
        -:  191:        /* Check initialization for GlobalPnSupport */
    #####:  192:		TEST_CHECK(CanNm_Internal.Channels[0].TimeoutTimer.State == CANNM_TIMER_STOPPED);
        -:  193:	}
        1:  194:	TEST_CHECK(CanNm_Internal.Channels[0].BusLoadReduction == 0);
        1:  195:	TEST_CHECK(CanNm_Internal.Channels[0].MessageCycleTimer.State == CANNM_TIMER_STOPPED);
        -:  196:
        -:  197:	/* Check initialization of user data to 0xFF */
        1:  198:	uint8* destUserData = CanNm_Internal_GetUserDataPtr(canNmChannel, canNmChannel->TxPdu->TxPduRef->SduDataPtr);
        1:  199:	uint8 userDataLength = CanNm_Internal_GetUserDataLength(canNmChannel);
        7:  200:	for (uint8* ptr = destUserData; ptr < (destUserData + userDataLength); ptr++) {
        6:  201:		TEST_CHECK(*destUserData == 0xFF);
        -:  202:	}
        -:  203:
        1:  204:	uint8 pduCbv = canNmChannel->TxPdu->TxPduRef->SduDataPtr[canNmChannel[0].PduCbvPosition];
        1:  205:	TEST_CHECK(pduCbv == 0x00);
        -:  206:
        1:  207:}
        -:  208:
        1:  209:void Test_Of_CanNm_DeInit(void)
        -:  210:{
        1:  211:    CanNm_Init(&canNmConfig);
        1:  212:    TEST_CHECK(CanNm_Internal.Channels[0].State == NM_STATE_BUS_SLEEP);
        -:  213:
        -:  214:    /* Check if deinitialization sets the state to NM_STATE_UNINIT after state NM_STATE_BUS_SLEEP*/
        1:  215:	CanNm_DeInit();
        1:  216:	TEST_CHECK(CanNm_Internal.Channels[0].State == NM_STATE_UNINIT);
        1:  217:	TEST_CHECK(CanNm_Internal.InitStatus = CANNM_UNINIT);
        1:  218:}
        -:  219:
        -:  220:
        1:  221:void Test_Of_CanNm_PassiveStartUp(void)
        -:  222:{
        -:  223:	Std_ReturnType status;
        -:  224:
        -:  225:	/* Check that PassiveStartUp returns E_NOT_OK when called without PassiveModeEnabled enabled*/
        1:  226:	canNmConfig.PassiveModeEnabled = 0;
        1:  227:	CanNm_Init(&canNmConfig);
        1:  228:	status = CanNm_PassiveStartUp(nmChannelHandle);
        1:  229:	TEST_CHECK(status == E_NOT_OK);
        1:  230:	CanNm_DeInit();
        -:  231:
        -:  232:	/* Check that PassiveStartUp returns E_OK when called after initialization with PassiveModeEnabled enabled */
        1:  233:	canNmConfig.PassiveModeEnabled = 1;
        1:  234:	CanNm_Init(&canNmConfig);
        1:  235:	status = CanNm_PassiveStartUp(nmChannelHandle);
        1:  236:	TEST_CHECK(status == E_OK);
        -:  237:
        1:  238:}
        -:  239:
        1:  240:void Test_Of_CanNm_NetworkRequest(void)
        -:  241:{
        -:  242:    Std_ReturnType status;
        -:  243:
        1:  244:	CanNm_Internal_ChannelType* ChannelInternal = &CanNm_Internal.Channels[nmChannelHandle];
        -:  245:
        -:  246:    // Check that NetworkRequest sets the channel to NM_MODE_NETWORK and NM_STATE_NORMAL_OPERATION
        1:  247:	CanNm_Init(&canNmConfig);
        1:  248:	status = CanNm_NetworkRequest(nmChannelHandle);
        1:  249:	TEST_CHECK(status == E_OK);
        1:  250:	TEST_CHECK(ChannelInternal->Requested == TRUE);
        1:  251:	TEST_CHECK(ChannelInternal->TxEnabled == TRUE);
        -:  252:
        1:  253:	ChannelInternal->Mode = NM_MODE_PREPARE_BUS_SLEEP;
        1:  254:	status = CanNm_NetworkRequest(nmChannelHandle);
        1:  255:	TEST_CHECK(status == E_OK);
        1:  256:	TEST_CHECK(ChannelInternal->Mode == NM_MODE_NETWORK);
        1:  257:	TEST_CHECK(ChannelInternal->State == NM_STATE_REPEAT_MESSAGE);
        1:  258:	TEST_CHECK(ChannelInternal->Requested == TRUE);
        -:  259:
        1:  260:	ChannelInternal->Mode = NM_MODE_NETWORK;
        1:  261:	ChannelInternal->State = NM_STATE_READY_SLEEP;
        1:  262:	status = CanNm_NetworkRequest(nmChannelHandle);
        1:  263:	TEST_CHECK(status == E_OK);
        1:  264:	TEST_CHECK(ChannelInternal->Mode == NM_MODE_NETWORK);
        1:  265:	TEST_CHECK(ChannelInternal->State == NM_STATE_NORMAL_OPERATION);
        1:  266:	TEST_CHECK(ChannelInternal->Requested == TRUE);
        -:  267:
        1:  268:	ChannelInternal->State = NM_STATE_NORMAL_OPERATION;
        1:  269:	status = CanNm_NetworkRequest(nmChannelHandle);
        1:  270:	TEST_CHECK(status == E_OK);
        1:  271:	TEST_CHECK(ChannelInternal->Mode == NM_MODE_NETWORK);
        1:  272:	TEST_CHECK(ChannelInternal->State == NM_STATE_NORMAL_OPERATION);
        1:  273:	TEST_CHECK(ChannelInternal->Requested == TRUE);
        -:  274:
        1:  275:	ChannelInternal->State = NM_STATE_REPEAT_MESSAGE;
        1:  276:	status = CanNm_NetworkRequest(nmChannelHandle);
        1:  277:	TEST_CHECK(status == E_OK);
        1:  278:	TEST_CHECK(ChannelInternal->Mode == NM_MODE_NETWORK);
        1:  279:	TEST_CHECK(ChannelInternal->State == NM_STATE_REPEAT_MESSAGE);
        1:  280:	TEST_CHECK(ChannelInternal->Requested == TRUE);
        1:  281:}
        -:  282:
        1:  283:void Test_Of_CanNm_NetworkRelease(void)
        -:  284:{
        1:  285:	CanNm_Internal_ChannelType* ChannelInternal = &CanNm_Internal.Channels[nmChannelHandle];
        -:  286:	Std_ReturnType status;
        -:  287:
        -:  288:	// Check that NetworkRelease sets the channel to NM_MODE_NETWORK and NM_STATE_READY_SLEEP
        1:  289:	CanNm_Init(&canNmConfig);
        1:  290:	status = CanNm_NetworkRelease(nmChannelHandle);
        1:  291:	TEST_CHECK(status == NM_E_OK);
        1:  292:	TEST_CHECK(ChannelInternal->Requested == FALSE);
        -:  293:
        1:  294:	ChannelInternal->Mode = NM_MODE_NETWORK;
        1:  295:	ChannelInternal->State = NM_STATE_NORMAL_OPERATION;
        1:  296:	status = CanNm_NetworkRelease(nmChannelHandle);
        1:  297:	TEST_CHECK(ChannelInternal->Mode == NM_MODE_NETWORK);
        1:  298:	TEST_CHECK(ChannelInternal->State == NM_STATE_READY_SLEEP);
        1:  299:	TEST_CHECK(ChannelInternal->Requested == FALSE);
        1:  300:	TEST_CHECK(ChannelInternal->TxEnabled == FALSE);
        -:  301:
        -:  302:
        1:  303:	CanNm_DeInit();
        1:  304:    CanNm_Init(&canNmConfig);
        1:  305:    const NetworkHandleType nmChannelHandle = 0;
        1:  306:    CanNm_Internal.Channels[nmChannelHandle].State = NM_STATE_NORMAL_OPERATION;
        1:  307:    CanNm_Internal.Channels[nmChannelHandle].Mode = NM_MODE_NETWORK;
        1:  308:    CanNm_Internal.Channels[nmChannelHandle].Requested = TRUE;
        -:  309:
        1:  310:    status = CanNm_NetworkRelease(nmChannelHandle);
        1:  311:    TEST_CHECK(status == E_OK);
        -:  312:
        -:  313:    // Check that Requested flag is set to FALSE after NetworkRelease
        1:  314:    TEST_CHECK(CanNm_Internal.Channels[nmChannelHandle].Requested == FALSE);
        -:  315:
        -:  316:    // Check that the function transitions to ReadySleep if the channel was in NormalOperation
        2:  317:    if (CanNm_Internal.Channels[nmChannelHandle].Mode == NM_MODE_NETWORK &&
        1:  318:        CanNm_Internal.Channels[nmChannelHandle].State == NM_STATE_NORMAL_OPERATION) {
    #####:  319:        TEST_CHECK(CanNm_Internal.Channels[nmChannelHandle].State == NM_STATE_READY_SLEEP);
        -:  320:    }
        -:  321:
        -:  322:
        1:  323:}
        -:  324:
        1:  325:void Test_Of_CanNm_DisableCommunication(void)
        -:  326:{
        1:  327:	CanNm_Internal_ChannelType* ChannelInternal = &CanNm_Internal.Channels[nmChannelHandle];
        -:  328:	Std_ReturnType status;
        -:  329:
        -:  330:	// Check if DisableCommunication work in PassiveModeEnabled off and NM_MODE_BUS_SLEEP
        1:  331:	canNmConfig.PassiveModeEnabled = 0;
        1:  332:	CanNm_Init(&canNmConfig);
        1:  333:	ChannelInternal->Mode = NM_MODE_NETWORK;
        1:  334:	status = CanNm_DisableCommunication(nmChannelHandle);
        1:  335:	TEST_CHECK(status == E_OK);
        1:  336:	TEST_CHECK(ChannelInternal->TxEnabled == 0);
        1:  337:	ChannelInternal->Mode = NM_MODE_BUS_SLEEP;
        1:  338:	CanNm_DeInit();
        -:  339:
        -:  340:	// Check if DisableCommunication work in PassiveModeEnabled on and NM_MODE_BUS_SLEEP
        1:  341:	canNmConfig.PassiveModeEnabled = 1;
        1:  342:	CanNm_Init(&canNmConfig);
        1:  343:	ChannelInternal->Mode = NM_MODE_NETWORK;
        1:  344:	status = CanNm_DisableCommunication(nmChannelHandle);
        1:  345:	TEST_CHECK(status == E_NOT_OK);
        1:  346:	CanNm_DeInit();
        -:  347:
        -:  348:    // Check if DisableCommunication work in PassiveModeEnabled on on and incorrect mode
        1:  349:    CanNm_Init(&canNmConfig);
        1:  350:    canNmConfig.PassiveModeEnabled = 1;
        1:  351:    ChannelInternal->Mode = NM_MODE_PREPARE_BUS_SLEEP;
        1:  352:    status = CanNm_DisableCommunication(nmChannelHandle);
        1:  353:    TEST_CHECK(status == E_NOT_OK);
        1:  354:    CanNm_DeInit();
        -:  355:
        -:  356:    // Check if DisableCommunication work in PassiveModeEnabled off and incorrect mode
        1:  357:    canNmConfig.PassiveModeEnabled = 0;
        1:  358:    ChannelInternal->Mode = NM_MODE_PREPARE_BUS_SLEEP;
        1:  359:    status = CanNm_DisableCommunication(nmChannelHandle);
        1:  360:    TEST_CHECK(status == E_NOT_OK);
        1:  361:    CanNm_DeInit();
        -:  362:
        -:  363:
        1:  364:}
        -:  365:
        1:  366:void Test_Of_CanNm_EnableCommunication(void)
        -:  367:{
        1:  368:	CanNm_Internal_ChannelType* ChannelInternal = &CanNm_Internal.Channels[nmChannelHandle];
        -:  369:	Std_ReturnType status;
        -:  370:
        -:  371:	 /* Check if EnableCommunication works in NM_MODE_NETWORK with PassiveModeEnabled off */
        1:  372:	canNmConfig.CoordinationSyncSupport = 1;
        1:  373:	CanNm_Init(&canNmConfig);
        1:  374:	ChannelInternal->Mode = NM_MODE_NETWORK;
        1:  375:	status = CanNm_EnableCommunication(nmChannelHandle);
        1:  376:	TEST_CHECK(status == E_OK);
        1:  377:	ChannelInternal->Mode = NM_MODE_BUS_SLEEP;
        1:  378:	CanNm_DeInit();
        -:  379:
        -:  380:	/* Check if EnableCommunication works in NM_MODE_NETWORK with PassiveModeEnabled on */
        1:  381:	canNmConfig.PassiveModeEnabled = 1;
        1:  382:	CanNm_Init(&canNmConfig);
        1:  383:	ChannelInternal->MessageCycleTimer.State = CANNM_TIMER_STARTED;
        1:  384:	status = CanNm_EnableCommunication(nmChannelHandle);
        1:  385:	TEST_CHECK(status == E_NOT_OK);
        1:  386:	CanNm_DeInit();
        -:  387:
        -:  388:	/* Check if EnableCommunication works in incorrect mode with PassiveModeEnabled on */
        1:  389:	canNmConfig.PassiveModeEnabled = 1;
        1:  390:	CanNm_Init(&canNmConfig);
        1:  391:	ChannelInternal->Mode = NM_MODE_PREPARE_BUS_SLEEP;
        1:  392:	status = CanNm_EnableCommunication(nmChannelHandle);
        1:  393:	TEST_CHECK(status == E_NOT_OK);
        1:  394:	CanNm_DeInit();
        -:  395:
        -:  396:	/* Check if EnableCommunication works in incorrect mode with PassiveModeEnabled off */
        1:  397:	canNmConfig.PassiveModeEnabled = 0;
        1:  398:	CanNm_Init(&canNmConfig);
        1:  399:	ChannelInternal->Mode = NM_MODE_PREPARE_BUS_SLEEP;
        1:  400:	status = CanNm_EnableCommunication(nmChannelHandle);
        1:  401:	TEST_CHECK(status == E_NOT_OK);
        1:  402:	CanNm_DeInit();
        1:  403:}
        -:  404:
        1:  405:void Test_Of_CanNm_SetUserData(void)
        -:  406:{
        1:  407:	CanNm_Internal_ChannelType* ChannelInternal = &CanNm_Internal.Channels[nmChannelHandle];
        -:  408:	Std_ReturnType status;
        1:  409:	const uint8 cnmUserDataPtr = 1;
        -:  410:
        -:  411:	// Check that SetUserData returns E_OK when UserDataEnabled is set
        1:  412:	canNmConfig.UserDataEnabled = 1;
        1:  413:	CanNm_Init(&canNmConfig);
        1:  414:	status = CanNm_SetUserData(nmChannelHandle, &cnmUserDataPtr);
        1:  415:	TEST_CHECK(status == E_OK);
        1:  416:	CanNm_DeInit();
        -:  417:
        1:  418:	canNmConfig.ComUserDataSupport = 1;
        1:  419:	CanNm_Init(&canNmConfig);
        1:  420:	status = CanNm_SetUserData(nmChannelHandle, &cnmUserDataPtr);
        1:  421:	TEST_CHECK(status == E_NOT_OK);
        1:  422:}
        -:  423:
        1:  424:void Test_Of_CanNm_GetUserData(void)
        -:  425:{
        1:  426:	CanNm_Internal_ChannelType* ChannelInternal = &CanNm_Internal.Channels[nmChannelHandle];
        -:  427:	Std_ReturnType status;
        -:  428:	uint8 nmUserData[CANNM_SDU_LENGTH];
        -:  429:
        -:  430:	// Check that GetUserData returns E_OK when UserDataEnabled is set
        1:  431:	canNmConfig.UserDataEnabled = 1;
        1:  432:	CanNm_Init(&canNmConfig);
        1:  433:	ChannelInternal->RxLastPdu = 1;
        1:  434:	status = CanNm_GetUserData(nmChannelHandle, nmUserData);
        1:  435:	TEST_CHECK(status == E_OK);
        -:  436:
        -:  437:	// Check that GetUserData returns E_NOT_OK when NO_PDU_RECEIVED
        1:  438:	ChannelInternal->RxLastPdu = NO_PDU_RECEIVED;
        1:  439:	status = CanNm_GetUserData(nmChannelHandle, nmUserData);
        1:  440:	TEST_CHECK(status == E_NOT_OK);
        1:  441:}
        -:  442:
        1:  443:void Test_Of_CanNm_Transmit(void)
        -:  444:{
        -:  445:	Std_ReturnType status;
        -:  446:
        -:  447:	// Check that Transmit returns E_NOT_OK before initialization
        1:  448:	CanNm_Init(&canNmConfig);
        1:  449:	status = CanNm_Transmit(TxPduId, &PduInfoPtr);
        1:  450:	TEST_CHECK(status == E_NOT_OK);
        -:  451:
        -:  452:	// Check that Transmit returns E_OK after proper configuration
        1:  453:	canNmConfig.GlobalPnSupport = 1;
        1:  454:	canNmConfig.ComUserDataSupport = 1;
        1:  455:	CanNm_Init(&canNmConfig);
        1:  456:	status = CanNm_Transmit(TxPduId, &cPduInfoPtr);
        1:  457:	TEST_CHECK(status == E_OK);
        1:  458:}
        -:  459:
        1:  460:void Test_Of_CanNm_GetNodeIdentifier(void)
        -:  461:{
        -:  462:    // Check that GetNodeIdentifier returns NM_E_NOT_OK before reception
        1:  463:	CanNm_Internal_ChannelType* ChannelInternal = &CanNm_Internal.Channels[nmChannelHandle];
        -:  464:	Std_ReturnType status;
        -:  465:
        1:  466:	CanNm_Init(&canNmConfig);
        1:  467:	status = CanNm_GetNodeIdentifier(nmChannelHandle, &nmNodeIdPtr);
        1:  468:	TEST_CHECK(status == NM_E_NOT_OK);
        -:  469:
        -:  470:	// Check that GetNodeIdentifier returns NM_E_OK after reception
        1:  471:	ChannelInternal->RxLastPdu = 1;
        1:  472:	status = CanNm_GetNodeIdentifier(nmChannelHandle, &nmNodeIdPtr);
        1:  473:	TEST_CHECK(status == NM_E_OK);
        1:  474:}
        -:  475:
        1:  476:void Test_Of_CanNm_GetLocalNodeIdentifier(void)
        -:  477:{
        -:  478:	Std_ReturnType status;
        -:  479:
        -:  480:	// Check that GetLocalNodeIdentifier returns NM_E_OK after initialization
        1:  481:	CanNm_Init(&canNmConfig);
        1:  482:	status = CanNm_GetLocalNodeIdentifier(nmChannelHandle, &nmNodeIdPtr);
        1:  483:	TEST_CHECK(status == NM_E_OK);
        1:  484:}
        -:  485:
        1:  486:void Test_Of_CanNm_RepeatMessageRequest(void)
        -:  487:{
        -:  488:    // Check that RepeatMessageRequest returns E_OK in NM_STATE_READY_SLEEP
        1:  489:	CanNm_Internal_ChannelType* ChannelInternal = &CanNm_Internal.Channels[nmChannelHandle];
        -:  490:	Std_ReturnType status;
        -:  491:
        1:  492:	canNmConfig.ChannelConfig[0]->NodeDetectionEnabled = 1;
        1:  493:	CanNm_Init(&canNmConfig);
        1:  494:	ChannelInternal->State = NM_STATE_READY_SLEEP;
        1:  495:	status = CanNm_RepeatMessageRequest(nmChannelHandle);
        1:  496:	TEST_CHECK(status == E_OK);
        -:  497:
        -:  498:	// Check that RepeatMessageRequest returns E_NOT_OK in other states
        1:  499:	status = CanNm_RepeatMessageRequest(nmChannelHandle);
        1:  500:	TEST_CHECK(status == E_NOT_OK);
        1:  501:}
        -:  502:
        1:  503:void Test_Of_CanNm_GetPduData(void)
        -:  504:{
        1:  505:	CanNm_Internal_ChannelType* ChannelInternal = &CanNm_Internal.Channels[nmChannelHandle];
        -:  506:	Std_ReturnType status;
        -:  507:
        -:  508:    // Check that GetPduData returns NM_E_NOT_OK before reception
        1:  509:	CanNm_Init(&canNmConfig);
        1:  510:	status = CanNm_GetPduData(nmChannelHandle, &nmPduDataPtr);
        1:  511:	TEST_CHECK(status == NM_E_NOT_OK);
        1:  512:	CanNm_DeInit();
        -:  513:
        -:  514:	// Check that GetPduData returns NM_E_NOT_OK before reception
        1:  515:	canNmConfig.ChannelConfig[0]->NodeDetectionEnabled = 1;
        1:  516:	CanNm_Init(&canNmConfig);
        1:  517:	ChannelInternal->RxLastPdu = 1;
        1:  518:	status = CanNm_GetPduData(nmChannelHandle, &nmPduDataPtr);
        1:  519:	TEST_CHECK(status == NM_E_OK);
        1:  520:}
        -:  521:
        1:  522:void Test_Of_CanNm_GetState(void)
        -:  523:{
        1:  524:	CanNm_Internal_ChannelType* ChannelInternal = &CanNm_Internal.Channels[nmChannelHandle];
        -:  525:	Std_ReturnType status;
        -:  526:
        -:  527:	// Check that GetState returns NM_E_OK after initialization
        1:  528:	CanNm_Init(&canNmConfig);
        1:  529:	status = CanNm_GetState(nmChannelHandle, &nmStatePtr, &nmModePtr);
        1:  530:	TEST_CHECK(status == NM_E_OK);
        1:  531:}
        -:  532:
        -:  533:
        1:  534:void Test_Of_CanNm_RequestBusSynchronization(void)
        -:  535:{
        1:  536:	CanNm_Internal_ChannelType* ChannelInternal = &CanNm_Internal.Channels[nmChannelHandle];
        -:  537:	Std_ReturnType status;
        -:  538:
        -:  539:	 // Check that RequestBusSynchronization returns E_NOT_OK before proper setup
        1:  540:	CanNm_Init(&canNmConfig);
        1:  541:	status = CanNm_RequestBusSynchronization(nmChannelHandle);
        1:  542:	TEST_CHECK(status == E_NOT_OK);
        -:  543:
        -:  544:	// Check that RequestBusSynchronization returns E_OK in NM_MODE_NETWORK
        1:  545:	ChannelInternal->Mode = NM_MODE_NETWORK;
        1:  546:	ChannelInternal->TxEnabled = 1;
        1:  547:	status = CanNm_RequestBusSynchronization(nmChannelHandle);
        1:  548:	TEST_CHECK(status == E_OK);
        1:  549:}
        -:  550:
        1:  551:void Test_Of_CanNm_CheckRemoteSleepInd(void)
        -:  552:{
        1:  553:    CanNm_Internal_ChannelType* ChannelInternal = &CanNm_Internal.Channels[nmChannelHandle];
        -:  554:
        -:  555:    // Check incorrect state (NM_STATE_NORMAL_OPERATION), the function should return E_NOT_OK
        1:  556:    ChannelInternal->State = NM_STATE_BUS_SLEEP;
        1:  557:    Std_ReturnType status = CanNm_CheckRemoteSleepInd(nmChannelHandle, &nmRemoteSleepIndPtr);
        1:  558:    TEST_CHECK(status == E_NOT_OK);
        -:  559:
        -:  560:    // Check correct NM_STATE_NORMAL_OPERATION state, the function should return E_OK
        1:  561:    ChannelInternal->State = NM_STATE_NORMAL_OPERATION;
        1:  562:    status = CanNm_CheckRemoteSleepInd(nmChannelHandle, &nmRemoteSleepIndPtr);
        1:  563:    TEST_CHECK(status == E_OK);
        -:  564:
        -:  565:
        1:  566:}
        -:  567:
        1:  568:void Test_Of_CanNm_SetSleepReadyBit(void)
        -:  569:{
        1:  570:	CanNm_Internal_ChannelType* ChannelInternal = &CanNm_Internal.Channels[nmChannelHandle];
        -:  571:	Std_ReturnType status;
        -:  572:	boolean nmSleepReadyBit;
        -:  573:
        -:  574:	// Check that SetSleepReadyBit returns E_NOT_OK before initialization
        1:  575:	CanNm_Init(&canNmConfig);
        1:  576:	status = CanNm_SetSleepReadyBit(nmChannelHandle, nmSleepReadyBit);
        1:  577:	TEST_CHECK(status == E_NOT_OK);
        1:  578:	CanNm_DeInit();
        -:  579:
        -:  580:	// Check that SetSleepReadyBit returns E_OK in NM_STATE_NORMAL_OPERATION
        1:  581:	canNmConfig.CoordinationSyncSupport = 1;
        1:  582:	CanNm_Init(&canNmConfig);
        1:  583:	ChannelInternal->State = NM_STATE_NORMAL_OPERATION;
        1:  584:	status = CanNm_SetSleepReadyBit(nmChannelHandle, nmSleepReadyBit);
        1:  585:	TEST_CHECK(status == E_OK);
        1:  586:}
        -:  587:
        1:  588:void Test_Of_CanNm_TxConfirmation(void)
        -:  589:{
        1:  590:	CanNm_Internal_ChannelType* ChannelInternal = &CanNm_Internal.Channels[nmChannelHandle];
        1:  591:	Std_ReturnType status = E_OK;
        -:  592:
        1:  593:	CanNm_Init(&canNmConfig);
        1:  594:	CanNm_TxConfirmation(nmChannelHandle, status);
        -:  595:
        1:  596:}
        -:  597:
        1:  598:void Test_Of_CanNm_ConfirmPnAvailability(void)
        -:  599:{
        1:  600:	CanNm_Internal_ChannelType* ChannelInternal = &CanNm_Internal.Channels[nmChannelHandle];
        1:  601:	CanNm_Init(&canNmConfig);
        1:  602:	CanNm_ConfirmPnAvailability(nmChannelHandle);
        1:  603:	TEST_CHECK(ChannelInternal->NmPduFilterAlgorithm = TRUE);
        1:  604:}
        -:  605:
        1:  606:void Test_Of_CanNm_TriggerTransmit(void)
        -:  607:{
        -:  608:	Std_ReturnType status;
        -:  609:
        1:  610:	CanNm_Init(&canNmConfig);
        -:  611:	/* Check that TriggerTransmit returns E_NOT_OK for SduLength = 0x1 */
        1:  612:	PduInfoPtr.SduLength = 0x1;
        1:  613:	status = CanNm_TriggerTransmit(TxPduId, &PduInfoPtr);
        1:  614:	TEST_CHECK(status == E_NOT_OK);
        -:  615:    /* Check that TriggerTransmit returns E_OK for valid SduLength */
        1:  616:	PduInfoPtr.SduLength = CANNM_SDU_LENGTH;
        1:  617:	status = CanNm_TriggerTransmit(TxPduId, &PduInfoPtr);
        1:  618:	TEST_CHECK(status == E_OK);
        1:  619:}
        -:  620:
        1:  621:void Test_Of_State_Machine(void)
        -:  622:{
        -:  623:	Std_ReturnType status;
        -:  624:	uint32 tick;
        -:  625:
 10000001:  626:	for (tick = 0; tick < 10000000UL; tick++){
 10000000:  627:		if (tick ==0){
        1:  628:			CanNm_Init(&canNmConfig);
        -:  629:            // Check if initial state is NM_STATE_BUS_SLEEP
        1:  630:			TEST_CHECK(nmStatePtr == NM_STATE_BUS_SLEEP);
        -:  631:		}
  9999999:  632:		else if (tick ==50000){
        1:  633:			status = CanNm_GetState(nmChannelHandle, &nmStatePtr, &nmModePtr);
        -:  634:			// Check if initial state is NM_STATE_BUS_SLEEP
        1:  635:			TEST_CHECK(nmStatePtr == NM_STATE_BUS_SLEEP);
        1:  636:			TEST_CHECK(status == E_OK);
        -:  637:		}
        -:  638:
  9999998:  639:		else if (tick ==70000){
        1:  640:			status = CanNm_NetworkRequest(nmChannelHandle);
        1:  641:			status = CanNm_GetState(nmChannelHandle, &nmStatePtr, &nmModePtr);
        -:  642:			// Check if initial state is NM_STATE_REPEAT_MESSAGE
        1:  643:			TEST_CHECK(nmStatePtr == NM_STATE_REPEAT_MESSAGE);
        1:  644:			TEST_CHECK(status == E_OK);
        -:  645:		}
  9999997:  646:		else if (tick ==90000){
        1:  647:			status = CanNm_CheckRemoteSleepInd(nmChannelHandle, &nmRemoteSleepIndPtr);
        1:  648:			status = CanNm_RepeatMessageRequest(nmChannelHandle);
        1:  649:			status = CanNm_RequestBusSynchronization(nmChannelHandle);
        1:  650:			status = CanNm_RepeatMessageRequest(nmChannelHandle);
        1:  651:			status = CanNm_GetState(nmChannelHandle, &nmStatePtr, &nmModePtr);
        -:  652:			// Check if initial state is NM_STATE_REPEAT_MESSAGE
        1:  653:			TEST_CHECK(nmStatePtr == NM_STATE_REPEAT_MESSAGE);
        1:  654:			TEST_CHECK(status == E_OK);
        -:  655:		}
        -:  656:
  9999996:  657:		else if (tick ==220000){
        1:  658:			status = CanNm_GetState(nmChannelHandle, &nmStatePtr, &nmModePtr);
        -:  659:			// Check if initial state is NM_STATE_NORMAL_OPERATION
        1:  660:			TEST_CHECK(nmStatePtr == NM_STATE_NORMAL_OPERATION);
        1:  661:			TEST_CHECK(status == E_OK);
        -:  662:		}
        -:  663:
  9999995:  664:		else if (tick ==490000){
        1:  665:			status = CanNm_CheckRemoteSleepInd(nmChannelHandle, &nmRemoteSleepIndPtr);
        1:  666:			status = CanNm_RepeatMessageRequest(nmChannelHandle);
        1:  667:			status = CanNm_RequestBusSynchronization(nmChannelHandle);
        1:  668:			status = CanNm_RepeatMessageRequest(nmChannelHandle);
        1:  669:			status = CanNm_GetState(nmChannelHandle, &nmStatePtr, &nmModePtr);
        -:  670:			// Check if initial state is NM_STATE_REPEAT_MESSAGE
        1:  671:			TEST_CHECK(nmStatePtr == NM_STATE_REPEAT_MESSAGE);
        1:  672:			TEST_CHECK(status == E_OK);
        -:  673:		}
        -:  674:
  9999994:  675:		else if (tick ==1400000){
        1:  676:			status = CanNm_NetworkRelease(nmChannelHandle);
        1:  677:			status = CanNm_GetState(nmChannelHandle, &nmStatePtr, &nmModePtr);
        -:  678:			// Check if initial state is NM_STATE_READY_SLEEP
        1:  679:			TEST_CHECK(nmStatePtr == NM_STATE_READY_SLEEP);
        1:  680:			status = CanNm_PassiveStartUp(nmChannelHandle);
        1:  681:			status = CanNm_NetworkRequest(nmChannelHandle);
        1:  682:			status = CanNm_NetworkRelease(nmChannelHandle);
        1:  683:			TEST_CHECK(status == E_OK);
        -:  684:		}
  9999993:  685:		else if (tick ==1400101){
        1:  686:			status = CanNm_GetState(nmChannelHandle, &nmStatePtr, &nmModePtr);
        -:  687:			// Check if initial state is NM_STATE_PREPARE_BUS_SLEEP
        1:  688:			TEST_CHECK(nmStatePtr == NM_STATE_PREPARE_BUS_SLEEP);
        1:  689:			status = CanNm_NetworkRelease(nmChannelHandle);
        1:  690:			status = CanNm_GetState(nmChannelHandle, &nmStatePtr, &nmModePtr);
        1:  691:			TEST_CHECK(nmStatePtr == NM_STATE_PREPARE_BUS_SLEEP);
        1:  692:			TEST_CHECK(status == E_OK);
        -:  693:		}
  9999992:  694:		else if (tick ==1401180){
        1:  695:			status = CanNm_GetState(nmChannelHandle, &nmStatePtr, &nmModePtr);
        -:  696:			// Check if initial state is NM_STATE_BUS_SLEEP
        1:  697:			TEST_CHECK(nmStatePtr == NM_STATE_BUS_SLEEP);
        1:  698:			status = CanNm_NetworkRelease(nmChannelHandle);
        1:  699:			status = CanNm_GetState(nmChannelHandle, &nmStatePtr, &nmModePtr);
        1:  700:			TEST_CHECK(nmStatePtr == NM_STATE_BUS_SLEEP);
        1:  701:			TEST_CHECK(status == E_OK);
        -:  702:		}
  9999991:  703:		else if (tick ==1800000){
        1:  704:			status = CanNm_NetworkRequest(nmChannelHandle);
        1:  705:			status = CanNm_GetState(nmChannelHandle, &nmStatePtr, &nmModePtr);
        -:  706:			// Check if initial state is NM_STATE_REPEAT_MESSAGE
        1:  707:			TEST_CHECK(nmStatePtr == NM_STATE_REPEAT_MESSAGE);
        1:  708:			TEST_CHECK(status == E_OK);
        1:  709:			status = CanNm_NetworkRelease(nmChannelHandle);
        -:  710:		}
  9999990:  711:		else if (tick ==1900000){
        1:  712:			status = CanNm_DisableCommunication(nmChannelHandle);
        1:  713:			status = CanNm_GetState(nmChannelHandle, &nmStatePtr, &nmModePtr);
        -:  714:			// Check if initial state is NM_STATE_BUS_SLEEP
        1:  715:			TEST_CHECK(nmStatePtr == NM_STATE_BUS_SLEEP);
        1:  716:			TEST_CHECK(status == E_OK);
        1:  717:			status = CanNm_NetworkRequest(nmChannelHandle);
        -:  718:		}
  9999989:  719:		else if (tick ==2500000){
        1:  720:			status = CanNm_GetState(nmChannelHandle, &nmStatePtr, &nmModePtr);
        -:  721:			// Check if initial state is NM_STATE_NORMAL_OPERATION
        1:  722:			TEST_CHECK(nmStatePtr == NM_STATE_NORMAL_OPERATION);
        1:  723:			TEST_CHECK(status == E_OK);
        1:  724:			status = CanNm_RepeatMessageRequest(nmChannelHandle);
        1:  725:			status = CanNm_GetState(nmChannelHandle, &nmStatePtr, &nmModePtr);
        -:  726:			// Check if initial state is NM_STATE_REPEAT_MESSAGE
        1:  727:			TEST_CHECK(nmStatePtr == NM_STATE_REPEAT_MESSAGE);
        -:  728:		}
  9999988:  729:		else if (tick ==2601050){
        1:  730:			status = CanNm_NetworkRelease(nmChannelHandle);
        1:  731:			status = CanNm_GetState(nmChannelHandle, &nmStatePtr, &nmModePtr);
        -:  732:			// Check if initial state is NM_STATE_READY_SLEEP
        1:  733:			TEST_CHECK(nmStatePtr == NM_STATE_READY_SLEEP);
        1:  734:			TEST_CHECK(status == E_OK);
        -:  735:		}
  9999987:  736:		else if (tick ==2605050){
        1:  737:			status = CanNm_GetState(nmChannelHandle, &nmStatePtr, &nmModePtr);
        -:  738:			// Check if initial state is NM_STATE_BUS_SLEEP
        1:  739:			TEST_CHECK(nmStatePtr == NM_STATE_BUS_SLEEP);
        1:  740:			CanNm_DeInit();
        -:  741:			// Check if initial state is NM_STATE_BUS_SLEEP
        1:  742:			TEST_CHECK(nmStatePtr == NM_STATE_BUS_SLEEP);
        1:  743:			TEST_CHECK(status == E_OK);
        -:  744:		}
  9999986:  745:        else if (tick ==2809050){
        1:  746:			status = CanNm_GetState(nmChannelHandle, &nmStatePtr, &nmModePtr);
        -:  747:			// Check if initial state is NM_STATE_UNINIT
        1:  748:			TEST_CHECK(nmStatePtr == NM_STATE_UNINIT);
        1:  749:			TEST_CHECK(status == E_OK);
        -:  750:		}
 10000000:  751:		CanNm_MainFunction();
        -:  752:	}
        -:  753:
        1:  754:	TEST_CHECK(status == E_OK);
        -:  755:
        1:  756:}
        -:  757:/*
        -:  758:  Test list - write down here all functions which should be executed as tests.
        -:  759:*/
        -:  760:TEST_LIST = {
        -:  761:  { "Test_Of_CanNm_Init", Test_Of_CanNm_Init },
        -:  762:  { "Test_Of_CanNm_DeInit", Test_Of_CanNm_DeInit },
        -:  763:  { "Test_Of_CanNm_PassiveStartUp", Test_Of_CanNm_PassiveStartUp },
        -:  764:  { "Test_Of_CanNm_NetworkRequest", Test_Of_CanNm_NetworkRequest },
        -:  765:  { "Test_Of_CanNm_NetworkRelease", Test_Of_CanNm_NetworkRelease },
        -:  766:  { "Test_Of_CanNm_DisableCommunication", Test_Of_CanNm_DisableCommunication },
        -:  767:  { "Test_Of_CanNm_EnableCommunication", Test_Of_CanNm_EnableCommunication },
        -:  768:  { "Test_Of_CanNm_SetUserData", Test_Of_CanNm_SetUserData },
        -:  769:  { "Test_Of_CanNm_GetUserData", Test_Of_CanNm_GetUserData },
        -:  770:  { "Test_Of_CanNm_Transmit", Test_Of_CanNm_Transmit },
        -:  771:  { "Test_Of_CanNm_GetNodeIdentifier", Test_Of_CanNm_GetNodeIdentifier },
        -:  772:  { "Test_Of_CanNm_GetLocalNodeIdentifier", Test_Of_CanNm_GetLocalNodeIdentifier },
        -:  773:  { "Test_Of_CanNm_RepeatMessageRequest", Test_Of_CanNm_RepeatMessageRequest },
        -:  774:  { "Test_Of_CanNm_GetPduData", Test_Of_CanNm_GetPduData },
        -:  775:  { "Test_Of_CanNm_GetState", Test_Of_CanNm_GetState },
        -:  776:  { "Test_Of_CanNm_RequestBusSynchronization", Test_Of_CanNm_RequestBusSynchronization },
        -:  777:  { "Test_Of_CanNm_CheckRemoteSleepInd", Test_Of_CanNm_CheckRemoteSleepInd },
        -:  778:  { "Test_Of_CanNm_SetSleepReadyBit", Test_Of_CanNm_SetSleepReadyBit },
        -:  779:  { "Test_Of_CanNm_TxConfirmation", Test_Of_CanNm_TxConfirmation },
        -:  780:  { "Test_Of_CanNm_ConfirmPnAvailability", Test_Of_CanNm_ConfirmPnAvailability },
        -:  781:  { "Test_Of_CanNm_TriggerTransmit", Test_Of_CanNm_TriggerTransmit },
        -:  782:  { "Test_Of_State_Machine", Test_Of_State_Machine },
        -:  783:  { NULL, NULL }
        -:  784:};
        -:  785:
